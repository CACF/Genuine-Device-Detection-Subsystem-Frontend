{"ast":null,"code":"var _this = this;\n\n/*\r\nCopyright (c) 2018-2019 Qualcomm Technologies, Inc.\r\nAll rights reserved.\r\nRedistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the \r\ndisclaimer below) provided that the following conditions are met:\r\n    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer \r\n      in the documentation and/or other materials provided with the distribution.\r\n    * Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote \r\n      products derived from this software without specific prior written permission.\r\n    * The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use \r\n      this software in a product, an acknowledgment is required by displaying the trademark/log as per the details provided \r\n      here: https://www.qualcomm.com/documents/dirbs-logo-and-brand-guidelines\r\n    * Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\r\n    * This notice may not be removed or altered from any source distribution.\r\nNO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED \r\nBY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO \r\nEVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \r\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \r\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\nimport * as OEMServices from '../api/OEMServices';\nimport { SET_OEM_LIST, SET_PENDING_IMEI_LIST, DOWNLOADED_PENDING_IMEI_LIST, IS_MISSING_INFO_SUBMITTED, BULK_UPLOAD_SUBMITTED } from \"./types\";\nimport FileSaver from \"file-saver\";\nimport { errors, SweetAlert } from \"./../utilities/helpers\";\nimport i18n from \"i18next\";\nexport var OEMListAction = function OEMListAction(data) {\n  return {\n    type: SET_OEM_LIST,\n    payload: data\n  };\n};\nexport var IMEIListAction = function IMEIListAction(data) {\n  return {\n    type: SET_PENDING_IMEI_LIST,\n    payload: data\n  };\n};\nexport var DownloadIMEIListAction = function DownloadIMEIListAction(data) {\n  return {\n    type: DOWNLOADED_PENDING_IMEI_LIST,\n    payload: data\n  };\n};\nexport var singleSubmissionAction = function singleSubmissionAction(data) {\n  return {\n    type: IS_MISSING_INFO_SUBMITTED,\n    payload: data\n  };\n};\nexport var bulkUploadAction = function bulkUploadAction(data) {\n  return {\n    type: BULK_UPLOAD_SUBMITTED,\n    payload: data\n  };\n}; // get OEM List\n\nexport var getOEMs = function getOEMs(config) {\n  return function (dispatch) {\n    var response = OEMServices.getOEMLoginsAPI(config);\n    response.then(function (res) {\n      return dispatch(OEMListAction(res.data));\n    }).catch(function (err) {\n      return errors(_this, err);\n    });\n  };\n}; // get OEM pending IMEIs List\n\nexport var getPendingIMEI = function getPendingIMEI(config, params) {\n  return function (dispatch) {\n    var response = OEMServices.getPendingIMEIAPI(config, params.loginId, params.start, params.limit);\n    response.then(function (res) {\n      dispatch(IMEIListAction(res.data));\n      dispatch(singleSubmissionAction(false));\n    }).catch(function (err) {\n      return console.log(err.message);\n    });\n  };\n}; // For Submitting single IMEI missing Information\n\nexport var singleInfoSubmission = function singleInfoSubmission(config, params) {\n  return function (dispatch) {\n    var response = OEMServices.singleInfoSubmissionAPI(config, params);\n    response.then(function (res) {\n      return dispatch(singleSubmissionAction(true));\n    }).catch(function (err) {\n      dispatch(singleSubmissionAction(false));\n      errors(_this, err);\n    });\n  };\n}; // For Submitting IMEI missing Information in Bulk\n\nexport var BulkUploadIMEIInfo = function BulkUploadIMEIInfo(config, params) {\n  return function (dispatch) {\n    var response = OEMServices.bulkUploadAPI(config, params);\n    response.then(function (res) {\n      params = {\n        title: 'Successful Records: ' + res.data.Successful_Records,\n        message: 'Failed Records: ' + res.data.Deleted_Record,\n        type: 'success'\n      };\n      SweetAlert(params);\n      dispatch(singleSubmissionAction(true));\n    }).catch(function (err) {\n      dispatch(bulkUploadAction(err.message));\n      errors(_this, err);\n    });\n  };\n}; // download OEM pending IMEIs List\n\nexport var downloadPendingIMEI = function downloadPendingIMEI(config, params) {\n  return function (dispatch) {\n    var response = OEMServices.downloadPendingIMEIAPI(config, params.loginName, params.loginId);\n    response.then(function (res) {\n      try {\n        var blob = new Blob([res.data], {\n          type: \"text/csv;\"\n        });\n        FileSaver.saveAs(blob, \"Request-Document.csv\");\n      } catch (err) {\n        var file = new Blob([res.data], {\n          type: \"text/csv;\"\n        });\n        window.navigator.msSaveBlob(file, \"Request-Document.csv\");\n      }\n\n      dispatch(DownloadIMEIListAction(true));\n    }).catch(function (err) {\n      dispatch(DownloadIMEIListAction(false));\n      errors(_this, err);\n    });\n  };\n}; // For Submitting single IMEI missing Information for Public\n\nexport var singlePublicInfoSubmission = function singlePublicInfoSubmission(params) {\n  return function (dispatch) {\n    var response = OEMServices.submitPublicResponseAPI(params);\n    response.then(function (res) {\n      if (res.status === 200) {\n        params = {\n          title: i18n.t('success'),\n          message: i18n.t('infoSubmitted'),\n          type: 'success'\n        };\n        SweetAlert(params);\n      }\n    }).catch(function (err) {\n      params = {\n        title: i18n.t('error'),\n        message: err.response.data.message,\n        type: 'error'\n      };\n      SweetAlert(params);\n    });\n  };\n};","map":{"version":3,"sources":["D:/CACF/International Projects/Genuine-Device-Detection-Subsystem-Frontend/src/actions/oemActions.js"],"names":["OEMServices","SET_OEM_LIST","SET_PENDING_IMEI_LIST","DOWNLOADED_PENDING_IMEI_LIST","IS_MISSING_INFO_SUBMITTED","BULK_UPLOAD_SUBMITTED","FileSaver","errors","SweetAlert","i18n","OEMListAction","data","type","payload","IMEIListAction","DownloadIMEIListAction","singleSubmissionAction","bulkUploadAction","getOEMs","config","dispatch","response","getOEMLoginsAPI","then","res","catch","err","getPendingIMEI","params","getPendingIMEIAPI","loginId","start","limit","console","log","message","singleInfoSubmission","singleInfoSubmissionAPI","BulkUploadIMEIInfo","bulkUploadAPI","title","Successful_Records","Deleted_Record","downloadPendingIMEI","downloadPendingIMEIAPI","loginName","blob","Blob","saveAs","file","window","navigator","msSaveBlob","singlePublicInfoSubmission","submitPublicResponseAPI","status","t"],"mappings":"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","sourcesContent":["/*\r\nCopyright (c) 2018-2019 Qualcomm Technologies, Inc.\r\nAll rights reserved.\r\nRedistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the \r\ndisclaimer below) provided that the following conditions are met:\r\n    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer \r\n      in the documentation and/or other materials provided with the distribution.\r\n    * Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote \r\n      products derived from this software without specific prior written permission.\r\n    * The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use \r\n      this software in a product, an acknowledgment is required by displaying the trademark/log as per the details provided \r\n      here: https://www.qualcomm.com/documents/dirbs-logo-and-brand-guidelines\r\n    * Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\r\n    * This notice may not be removed or altered from any source distribution.\r\nNO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED \r\nBY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO \r\nEVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \r\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \r\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN \r\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nimport * as OEMServices from '../api/OEMServices'\r\nimport { SET_OEM_LIST, SET_PENDING_IMEI_LIST, DOWNLOADED_PENDING_IMEI_LIST, IS_MISSING_INFO_SUBMITTED, BULK_UPLOAD_SUBMITTED } from \"./types\";\r\nimport FileSaver from \"file-saver\";\r\nimport { errors, SweetAlert } from \"./../utilities/helpers\";\r\nimport i18n from \"i18next\";\r\n\r\nexport const OEMListAction = data => {\r\n  return {\r\n    type: SET_OEM_LIST,\r\n    payload: data\r\n  };\r\n};\r\n\r\nexport const IMEIListAction = data => {\r\n  return {\r\n    type: SET_PENDING_IMEI_LIST,\r\n    payload: data\r\n  };\r\n};\r\n\r\nexport const DownloadIMEIListAction = data => {\r\n  return {\r\n    type: DOWNLOADED_PENDING_IMEI_LIST,\r\n    payload: data\r\n  };\r\n};\r\n\r\nexport const singleSubmissionAction = data => {\r\n  return {\r\n    type: IS_MISSING_INFO_SUBMITTED,\r\n    payload: data\r\n  };\r\n};\r\n\r\nexport const bulkUploadAction = data => {\r\n  return {\r\n    type: BULK_UPLOAD_SUBMITTED,\r\n    payload: data\r\n  };\r\n};\r\n\r\n// get OEM List\r\nexport const getOEMs = (config) => dispatch => {\r\n  const response = OEMServices.getOEMLoginsAPI(config);\r\n  response.then(res =>\r\n    dispatch(OEMListAction(res.data))\r\n  )\r\n    .catch(err =>\r\n      errors(this, err)\r\n    );\r\n};\r\n\r\n// get OEM pending IMEIs List\r\nexport const getPendingIMEI = (config, params) => dispatch => {\r\n  const response = OEMServices.getPendingIMEIAPI(config, params.loginId, params.start, params.limit);\r\n  response.then(res =>{\r\n    dispatch(IMEIListAction(res.data));\r\n    dispatch(singleSubmissionAction(false))\r\n  })\r\n    .catch(err =>\r\n      console.log(err.message)\r\n    );\r\n};\r\n\r\n// For Submitting single IMEI missing Information\r\nexport const singleInfoSubmission = (config, params) => dispatch => {\r\n  const response = OEMServices.singleInfoSubmissionAPI(config, params);\r\n  response.then(res =>\r\n    dispatch(singleSubmissionAction(true))\r\n  )\r\n    .catch(err =>{\r\n      dispatch(singleSubmissionAction(false));\r\n      errors(this, err);\r\n     });\r\n};\r\n\r\n// For Submitting IMEI missing Information in Bulk\r\nexport const BulkUploadIMEIInfo = (config, params) => dispatch => {\r\n  const response = OEMServices.bulkUploadAPI(config, params);\r\n  response.then(res =>{\r\n    params = {\r\n      title: 'Successful Records: ' + res.data.Successful_Records,\r\n      message: 'Failed Records: ' +  res.data.Deleted_Record,\r\n      type: 'success'\r\n    }\r\n    SweetAlert(params);\r\n    dispatch(singleSubmissionAction(true));\r\n  })\r\n    .catch(err =>{\r\n      dispatch(bulkUploadAction(err.message));\r\n      errors(this, err);\r\n     });\r\n};\r\n\r\n// download OEM pending IMEIs List\r\nexport const downloadPendingIMEI = (config, params) => dispatch => {\r\n  const response = OEMServices.downloadPendingIMEIAPI(config, params.loginName, params.loginId);\r\n  response.then(res => {\r\n    try {\r\n      let blob = new Blob([res.data], { type: \"text/csv;\" });\r\n      FileSaver.saveAs(blob, \"Request-Document.csv\");\r\n    } catch (err) {\r\n      let file = new Blob([res.data], { type: \"text/csv;\" });\r\n      window.navigator.msSaveBlob(file, \"Request-Document.csv\");\r\n    }\r\n    dispatch(DownloadIMEIListAction(true));\r\n  }\r\n  )\r\n    .catch(err =>{\r\n      dispatch(DownloadIMEIListAction(false));\r\n      errors(this, err);\r\n    });\r\n};\r\n\r\n// For Submitting single IMEI missing Information for Public\r\nexport const singlePublicInfoSubmission = (params) => dispatch => {\r\n  const response = OEMServices.submitPublicResponseAPI(params);\r\n  response.then(res =>{\r\n    if(res.status === 200)\r\n    {\r\n      params = {\r\n      title: i18n.t('success'),\r\n      message: i18n.t('infoSubmitted'),\r\n      type: 'success'\r\n    }\r\n    SweetAlert(params); \r\n   }\r\n  })\r\n    .catch(err =>{\r\n      params = {\r\n        title: i18n.t('error'),\r\n        message: err.response.data.message,\r\n        type: 'error'\r\n      }\r\n      SweetAlert(params); \r\n     });\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}